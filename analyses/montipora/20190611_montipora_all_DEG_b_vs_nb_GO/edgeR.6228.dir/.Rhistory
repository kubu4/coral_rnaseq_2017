install.packages("manipulate")
getwd
getwd(dir)
getwd()
qPCR_master_list_messy <- read.csv("~/Dropbox/Sam Friedman Lab/qPCR_Quant_Cq_Results/qPCR_master_list_messy.csv")
View(qPCR_master_list_messy)
View(qPCR_master_list_messy)
CQagg(qPCR_master_list_messy)
CQagg(qPCR_master_list_messy)
source('~/gitrepos/Scripts/R/CFX_Cq_Agg.R')
CQagg(qPCR_master_list_messy)
View(qPCR_master_list_messy)
source('~/gitrepos/Scripts/R/CFX_Cq_Agg.R')
CQagg(qPCR_master_list_messy)
CQagg(qPCR_master_list_messy) > cleantest.csv
View(CQagg)
CQagg(qPCR_master_list_messy) cleantest.csv
CQagg(qPCR_master_list_messy) -> cleantest.csv
CQagg(qPCR_master_list_messy, 6, 9)
View(CQagg)
View(CQagg)
CQagg(qPCR_master_list_messy)
CQagg(qPCR_master_list_messy)
source('~/gitrepos/Scripts/R/CFX_Cq_Agg.R')
source('~/gitrepos/Scripts/R/CFX_Cq_Agg.R')
CQagg(qPCR_master_list_messy) > output_test.csv
CQagg(qPCR_master_list_messy) -> output_test.csv
View(output_test.csv)
source('~/gitrepos/Scripts/R/CFX_Cq_Agg.R')
qPCR_master_list_messy <- read.csv("~/Dropbox/Sam Friedman Lab/qPCR_Quant_Cq_Results/qPCR_master_list_messy.csv")
View(qPCR_master_list_messy)
CQagg(qPCR_master_list_messy) outputtest.csv
CQagg(qPCR_master_list_messy) > outputtest.csv
CQagg(qPCR_master_list_messy)
install.packages("ggplot2")
install.packages("ggplot2")
load("~/Downloads/ct-values-2015.csv")
ct.values.2015 <- read.csv("~/Downloads/ct-values-2015.csv", header=FALSE)
View(ct.values.2015)
install.packages("ggplot2")
install.packages("plyr")
install.packages("splitstackshape")
require(plyr)
require(ggplot2)
require(splitstackshape)
dCt<-read.csv("~/Downloads/ct-values-2015.csv", header=T)
dCt<-cSplit(dCt,"SAMPLE_ID", sep= "_", drop=F)
dCt<-rename(dCt,replace=c("SAMPLE_ID_1"="Pop","SAMPLE_ID_2"="Treat","SAMPLE_ID_3"="Sample"))
dCt$CARM<-2^-(dCt$CarmCt-dCt$Actinct)
dCt$TLR<-2^-(dCt$TLR-dCt$Actinct)
dCt$CRAF<-2^-(dCt$CRAFct-dCt$Actinct)
dCt$H2AV<-2^-(dCt$H2AVct-dCt$Actinct)
dCt$PGRP<-2^-(dCt$PGRP-dCt$Actinct)
dCt$HSP70<-2^-(dCt$HSP70Ct-dCt$Actinct)
dCt$BMP2<-2^-(dCt$BMP2-dCt$Actinct)
dCt$GRB2<-2^-(dCt$GRB2-dCt$Actinct)
dCt$PGEEP4<-2^-(dCt$PGEEP4ct-dCt$Actinct)
#log transform the data to develop normality in data
dCt$CARMlog<-log(dCt$CARM)
dCt$TLRlog<-log(dCt$TLR)
dCt$H2AVlog<-log(dCt$H2AV)
dCt$PGRPlog<-log(dCt$PGRP)
dCt$HSP70log<-log(dCt$HSP70)
dCt$BMP2log<-log(dCt$BMP2)
dCt$GRB2log<-log(dCt$GRB2)
dCt$PGEEP4log<-log(dCt$PGEEP4)
dCt$CRAFlog<-log(dCt$CRAF)
CARM<-aov(CARMlog~Pop+Treat+Pop:Treat, data=dCt)
CARM
TukeyHSD(CARM)
plot(TukeyHSD(CARM))
plot(TukeyHSD(CARM))
summary(CARM)
PGRP<-aov(PGRPlog~Pop+Treat+Pop:Treat, data=dCt)
PGRP
TukeyHSD(PGRP)
plot(TukeyHSD(PGRP))
summary(PGRP)
temperature <- c(0,6)
mechanical <- c(0,6)
prop.test(temperature, mechanical)
prop.test(c(0,0),c(6,6))
survivors<-matrixc(0,6,0,6),ncol=2,byrow=T)
survivors<-matrix(c(0,6,0,6)),ncol=2,byrow=T)
survivors<-matrix(c(0,6,0,6),ncol=2,byrow=T)
rownames(survivors)<-c("temperature stress","mechanical stress")
colnames(survivors)<-c("survivors","mortalities")
prop.test(survivors)
survivors
#Create matrix with survivorship and mortality data for each group
morts.table<-matrix(c(0,6,0,6),ncol=2,byrow=T)
#Add row names
rownames(morts.table)<-c("temperature stress","mechanical stress")
#Add column names
colnames(morts.table)<-c("survivors","mortalities")
#View table
morts.table
#Data proportions test for differences between between the two groups.
prop.test(morts.table)
knitr::opts_chunk$set(echo = TRUE)
strsplit(c("ab", "cde", "XYZ"), c("Y", ""))
?strsplit
library(seacarb)
library(tidyverse)
library(whoami)
# Acid titrant constants
#Batch A10
A10_density <- 1.02449 # g/cm^3
A10_concentration <- 0.100215 # mol/kg
# CRM constants
#Batch 168
CRM168_TA <- 2207.62 # umol/kg
CRM168_salinity <- 33.481 # PSU (~g/kg)
#Enter voltage cutoffs
#These values are constants.
pH3.0 <- 228.57
pH3.5 <- 200
mol_to_umol <- 1000000
# Load file
data_file <- 'data/titration_data/example_data.csv'
### Read data in as csv table that handles issue of having more columns in bottom portion of file than in top portion.
# Sets file encoding to rm weird characters
# Sets number of columns and assigns column names (V#) based on total number of fields detected in the file.
data1 <- read.table(data_file, header = FALSE, stringsAsFactors = FALSE, fileEncoding="UTF-8-BOM", sep = ",", col.names = paste0("V",seq_len(max(count.fields(data_file, sep = ',')) - 1)), fill = TRUE)
librayr(dplyr)
library(dplyr)
crabdata <- read.csv("https://github.com/RobertsLab/project-crab/raw/master/data/20180502_seq_subset.csv")
View(crabdata)
crabdata %>%
spread(key = FRP, value = Original_sample_conc) %>%
filter(nrow(>2))
crabdata %>%
spread(key = FRP, value = Original_sample_conc) %>%
filter(nrow() > 2)
crabdata %>%
spread(key = FRP, value = Original_sample_conc)
library(tidyverse)
crabdata %>%
spread(key = FRP, value = Original_sample_conc)
crabdata %>%
spread(key = FRP, value = Original_sample_conc) %>%
filter(!is.na(Original_sample_conc))
fullset <- group_by(crabdata, FRP) %>%
summarize(count = n())
group_by(crabdata, FRP) %>%
summarize(count = n())
?count
crabdata %>% count(FRP)
crabdata %>%
count(FRP) %>%
filter(count > 2) %>%
left_join(crabdata, by = "FRP")
crabdata %>%
count(FRP) %>%
filter(count > 2)
crabdata %>%
count(FRP) %>%
filter(n > 2)
crabdata %>%
count(FRP) %>%
filter(n > 2) %>%
left_join(crabdata, by = "FRP")
?quantile
crabdata_pcr <- read.csv("https://raw.githubusercontent.com/RobertsLab/project-crab/master/data/20180516_seq_samples.csv")
library(tidyverse)
crabdata_pcr
#listing column name
colnames(crabdata_pcr)
crabdata_pcr <- read_csv("https://raw.githubusercontent.com/RobertsLab/project-crab/master/data/20180516_seq_samples.csv")
crabdata_pcr
crabdata_pcr %>%
select(FRP, Sample_Day, temperature_treatment, infection_status, sq_mean.y, sq_mean.x) %>%
arrange(infection_status,sq_mean.y)
pcrsum <- crabdata_pcr %>%
select(FRP, infection_status, sq_mean.y, sq_mean.x) %>%
arrange(infection_status,sq_mean.y) %>%
unique()
ggplot(data = pcrsum) +
geom_histogram(aes(x = sq_mean.y)) +
facet_wrap(~infection_status)
ggplot(data = pcrsum) +
geom_histogram(aes(x = sq_mean.x)) +
facet_wrap(~infection_status)
Sys.getenv("PATH")
help("Startup")
R.home(component = "home")
getwd()
system("sed 's/1SN_19A/1SN_19\/A/' tmp2.txt")
system("sed 's/1SN_19A/1SN_19\\/A/' tmp2.txt")
knitr::opts_chunk$set(echo = TRUE)
source("https://bioconductor.org/biocLite.R")
biocLite("GSEABase")
biocLite("GSEABase")
installed.packages()[, c("Package", "LibPath")]
biocLite("GSEABase")
remove.packages(c("RCurl", "annotate", "GSEABase"))
remove.packages(c("boot", "class", "cluster", "codetools", "foreign", "lattice", "MASS", "Matrix", "mgcv", "nlme", "rpart", "survival"))
remove.packages(c("boot", "class", "cluster", "codetools", "foreign", "lattice", "MASS", "Matrix", "mgcv", "nlme", "rpart", "survival"), lib ="/usr/lib/R/library")
.libPaths()
source("https://bioconductor.org/biocLite.R")
biocLite("GSEABase")
source("https://bioconductor.org/biocLite.R")
biocLite("GSEABase")
source("https://bioconductor.org/biocLite.R")
biocLite("GSEABase")
library("GSEABase", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
?`GSEABase-package`
?GSEABase
?GOCollection()
NullCollection()
## NullCollection when no collection type specified
collectionType(GeneSet())
collectionType(GeneSet(collectionType=GOCollection()))
## fl could be a url
fl <- system.file("extdata", "Broad.xml", package="GSEABase")
gs1 <- getBroadSets(fl)[[1]]
collectionType(gs1) # BroadCollection
## new BroadCollection, with different category
bc <- BroadCollection(category="c2")
## change collectionType of gs2
gs2 <- gs1
collectionType(gs2) <- NullCollection()
## OBOCollection
fl <- system.file("extdata", "goslim_plant.obo", package="GSEABase")
getOBOCollection(fl, evidenceCode="TAS") # returns OBOCollection
OBOCollection(c("GO:0008967", "GO:0015119", "GO:0030372", "GO:0002732",
"GO:0048090"))
biocLIte("GO.db")
biocLite("GO.db")
citation()
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("karyoploteR")
library(karyoploteR)
custom.genome <- toGRanges(data.frame(chr=c("A", "B"), start=c(1, 1), end=c(100, 200)))
kp <- plotKaryotype(genome = custom.genome)
custom.genome <- toGRanges(data.frame(chr=c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18" ), start=c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ), end=c(89643857,	69596280,	57743597, 65288255, 67248332, 61759565, 43120122, 61151155, 38581958, 53961475, 51449921, 50438331, 44396874, 45393038, 47938513, 31980953, 34923512,	27737463)))
kp <- plotKaryotype(genome = custom.genome)
library(GSEABase)
go_ids <- scan("P0.05_C1.male-UP.subset.GOseq.depleted.GOterms.txt", what = character())
setwd("~/gitrepos/coral_rnaseq_2017/analyses/montipora/20190611_montipora_all_DEG_b_vs_nb_GO/")
go_ids <- scan("P0.05_C1.male-UP.subset.GOseq.depleted.GOterms.txt", what = character())
setwd("~/gitrepos/coral_rnaseq_2017/analyses/montipora/20190611_montipora_all_DEG_b_vs_nb_GO/edgeR.6228.dir/")
go_ids <- scan("P0.05_C1.male-UP.subset.GOseq.depleted.GOterms.txt", what = character())
go_ids <- scan("P0.05_C1.bleached-UP.subset.GOseq.enriched.GOterms.txt", what = character())
View(go_ids)
#goslims with GSEA
myCollection <- GOCollection(go_ids)
View(myCollection)
#I downloaded goslim_generic.obo from http://geneontology.org/docs/go-subset-guide/
#then i moved it to the R library for GSEABase in the extdata folder
slim <- getOBOCollection("~/Downloads/goslim_generic.obo")
View(slim)
slims <- goSlim(myCollection, slim, "BP")
View(slims)
go_ids <- scan("P0.05_C1.bleached-UP.subset.GOseq.enriched.GOterms.txt", what = character())
#goslims with GSEA
myCollection <- GOCollection(go_ids)
#I downloaded goslim_generic.obo from http://geneontology.org/docs/go-subset-guide/
#then i moved it to the R library for GSEABase in the extdata folder
slim <- getOBOCollection("/home/samb/R/x86_64-pc-linux-gnu-library/3.4/GSEABase/extdatagoslim_generic.obo")
go_ids <- scan("P0.05_C1.bleached-UP.subset.GOseq.enriched.GOterms.txt", what = character())
#goslims with GSEA
myCollection <- GOCollection(go_ids)
#I downloaded goslim_generic.obo from http://geneontology.org/docs/go-subset-guide/
#then i moved it to the R library for GSEABase in the extdata folder
slim <- getOBOCollection("~/Downloads/goslim_generic.obo")
slims <- goSlim(myCollection, slim, "BP")
