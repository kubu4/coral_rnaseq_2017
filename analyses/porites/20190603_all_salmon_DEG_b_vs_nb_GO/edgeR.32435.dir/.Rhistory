install.packages("manipulate")
getwd
getwd(dir)
getwd()
qPCR_master_list_messy <- read.csv("~/Dropbox/Sam Friedman Lab/qPCR_Quant_Cq_Results/qPCR_master_list_messy.csv")
View(qPCR_master_list_messy)
View(qPCR_master_list_messy)
CQagg(qPCR_master_list_messy)
CQagg(qPCR_master_list_messy)
source('~/gitrepos/Scripts/R/CFX_Cq_Agg.R')
CQagg(qPCR_master_list_messy)
View(qPCR_master_list_messy)
source('~/gitrepos/Scripts/R/CFX_Cq_Agg.R')
CQagg(qPCR_master_list_messy)
CQagg(qPCR_master_list_messy) > cleantest.csv
View(CQagg)
CQagg(qPCR_master_list_messy) cleantest.csv
CQagg(qPCR_master_list_messy) -> cleantest.csv
CQagg(qPCR_master_list_messy, 6, 9)
View(CQagg)
View(CQagg)
CQagg(qPCR_master_list_messy)
CQagg(qPCR_master_list_messy)
source('~/gitrepos/Scripts/R/CFX_Cq_Agg.R')
source('~/gitrepos/Scripts/R/CFX_Cq_Agg.R')
CQagg(qPCR_master_list_messy) > output_test.csv
CQagg(qPCR_master_list_messy) -> output_test.csv
View(output_test.csv)
source('~/gitrepos/Scripts/R/CFX_Cq_Agg.R')
qPCR_master_list_messy <- read.csv("~/Dropbox/Sam Friedman Lab/qPCR_Quant_Cq_Results/qPCR_master_list_messy.csv")
View(qPCR_master_list_messy)
CQagg(qPCR_master_list_messy) outputtest.csv
CQagg(qPCR_master_list_messy) > outputtest.csv
CQagg(qPCR_master_list_messy)
install.packages("ggplot2")
install.packages("ggplot2")
load("~/Downloads/ct-values-2015.csv")
ct.values.2015 <- read.csv("~/Downloads/ct-values-2015.csv", header=FALSE)
View(ct.values.2015)
install.packages("ggplot2")
install.packages("plyr")
install.packages("splitstackshape")
require(plyr)
require(ggplot2)
require(splitstackshape)
dCt<-read.csv("~/Downloads/ct-values-2015.csv", header=T)
dCt<-cSplit(dCt,"SAMPLE_ID", sep= "_", drop=F)
dCt<-rename(dCt,replace=c("SAMPLE_ID_1"="Pop","SAMPLE_ID_2"="Treat","SAMPLE_ID_3"="Sample"))
dCt$CARM<-2^-(dCt$CarmCt-dCt$Actinct)
dCt$TLR<-2^-(dCt$TLR-dCt$Actinct)
dCt$CRAF<-2^-(dCt$CRAFct-dCt$Actinct)
dCt$H2AV<-2^-(dCt$H2AVct-dCt$Actinct)
dCt$PGRP<-2^-(dCt$PGRP-dCt$Actinct)
dCt$HSP70<-2^-(dCt$HSP70Ct-dCt$Actinct)
dCt$BMP2<-2^-(dCt$BMP2-dCt$Actinct)
dCt$GRB2<-2^-(dCt$GRB2-dCt$Actinct)
dCt$PGEEP4<-2^-(dCt$PGEEP4ct-dCt$Actinct)
#log transform the data to develop normality in data
dCt$CARMlog<-log(dCt$CARM)
dCt$TLRlog<-log(dCt$TLR)
dCt$H2AVlog<-log(dCt$H2AV)
dCt$PGRPlog<-log(dCt$PGRP)
dCt$HSP70log<-log(dCt$HSP70)
dCt$BMP2log<-log(dCt$BMP2)
dCt$GRB2log<-log(dCt$GRB2)
dCt$PGEEP4log<-log(dCt$PGEEP4)
dCt$CRAFlog<-log(dCt$CRAF)
CARM<-aov(CARMlog~Pop+Treat+Pop:Treat, data=dCt)
CARM
TukeyHSD(CARM)
plot(TukeyHSD(CARM))
plot(TukeyHSD(CARM))
summary(CARM)
PGRP<-aov(PGRPlog~Pop+Treat+Pop:Treat, data=dCt)
PGRP
TukeyHSD(PGRP)
plot(TukeyHSD(PGRP))
summary(PGRP)
temperature <- c(0,6)
mechanical <- c(0,6)
prop.test(temperature, mechanical)
prop.test(c(0,0),c(6,6))
survivors<-matrixc(0,6,0,6),ncol=2,byrow=T)
survivors<-matrix(c(0,6,0,6)),ncol=2,byrow=T)
survivors<-matrix(c(0,6,0,6),ncol=2,byrow=T)
rownames(survivors)<-c("temperature stress","mechanical stress")
colnames(survivors)<-c("survivors","mortalities")
prop.test(survivors)
survivors
#Create matrix with survivorship and mortality data for each group
morts.table<-matrix(c(0,6,0,6),ncol=2,byrow=T)
#Add row names
rownames(morts.table)<-c("temperature stress","mechanical stress")
#Add column names
colnames(morts.table)<-c("survivors","mortalities")
#View table
morts.table
#Data proportions test for differences between between the two groups.
prop.test(morts.table)
knitr::opts_chunk$set(echo = TRUE)
strsplit(c("ab", "cde", "XYZ"), c("Y", ""))
?strsplit
library(seacarb)
library(tidyverse)
library(whoami)
# Acid titrant constants
#Batch A10
A10_density <- 1.02449 # g/cm^3
A10_concentration <- 0.100215 # mol/kg
# CRM constants
#Batch 168
CRM168_TA <- 2207.62 # umol/kg
CRM168_salinity <- 33.481 # PSU (~g/kg)
#Enter voltage cutoffs
#These values are constants.
pH3.0 <- 228.57
pH3.5 <- 200
mol_to_umol <- 1000000
# Load file
data_file <- 'data/titration_data/example_data.csv'
### Read data in as csv table that handles issue of having more columns in bottom portion of file than in top portion.
# Sets file encoding to rm weird characters
# Sets number of columns and assigns column names (V#) based on total number of fields detected in the file.
data1 <- read.table(data_file, header = FALSE, stringsAsFactors = FALSE, fileEncoding="UTF-8-BOM", sep = ",", col.names = paste0("V",seq_len(max(count.fields(data_file, sep = ',')) - 1)), fill = TRUE)
librayr(dplyr)
library(dplyr)
crabdata <- read.csv("https://github.com/RobertsLab/project-crab/raw/master/data/20180502_seq_subset.csv")
View(crabdata)
crabdata %>%
spread(key = FRP, value = Original_sample_conc) %>%
filter(nrow(>2))
crabdata %>%
spread(key = FRP, value = Original_sample_conc) %>%
filter(nrow() > 2)
crabdata %>%
spread(key = FRP, value = Original_sample_conc)
library(tidyverse)
crabdata %>%
spread(key = FRP, value = Original_sample_conc)
crabdata %>%
spread(key = FRP, value = Original_sample_conc) %>%
filter(!is.na(Original_sample_conc))
fullset <- group_by(crabdata, FRP) %>%
summarize(count = n())
group_by(crabdata, FRP) %>%
summarize(count = n())
?count
crabdata %>% count(FRP)
crabdata %>%
count(FRP) %>%
filter(count > 2) %>%
left_join(crabdata, by = "FRP")
crabdata %>%
count(FRP) %>%
filter(count > 2)
crabdata %>%
count(FRP) %>%
filter(n > 2)
crabdata %>%
count(FRP) %>%
filter(n > 2) %>%
left_join(crabdata, by = "FRP")
?quantile
crabdata_pcr <- read.csv("https://raw.githubusercontent.com/RobertsLab/project-crab/master/data/20180516_seq_samples.csv")
library(tidyverse)
crabdata_pcr
#listing column name
colnames(crabdata_pcr)
crabdata_pcr <- read_csv("https://raw.githubusercontent.com/RobertsLab/project-crab/master/data/20180516_seq_samples.csv")
crabdata_pcr
crabdata_pcr %>%
select(FRP, Sample_Day, temperature_treatment, infection_status, sq_mean.y, sq_mean.x) %>%
arrange(infection_status,sq_mean.y)
pcrsum <- crabdata_pcr %>%
select(FRP, infection_status, sq_mean.y, sq_mean.x) %>%
arrange(infection_status,sq_mean.y) %>%
unique()
ggplot(data = pcrsum) +
geom_histogram(aes(x = sq_mean.y)) +
facet_wrap(~infection_status)
ggplot(data = pcrsum) +
geom_histogram(aes(x = sq_mean.x)) +
facet_wrap(~infection_status)
Sys.getenv("PATH")
help("Startup")
R.home(component = "home")
getwd()
system("sed 's/1SN_19A/1SN_19\/A/' tmp2.txt")
system("sed 's/1SN_19A/1SN_19\\/A/' tmp2.txt")
knitr::opts_chunk$set(echo = TRUE)
source("https://bioconductor.org/biocLite.R")
biocLite("GSEABase")
biocLite("GSEABase")
installed.packages()[, c("Package", "LibPath")]
biocLite("GSEABase")
remove.packages(c("RCurl", "annotate", "GSEABase"))
remove.packages(c("boot", "class", "cluster", "codetools", "foreign", "lattice", "MASS", "Matrix", "mgcv", "nlme", "rpart", "survival"))
remove.packages(c("boot", "class", "cluster", "codetools", "foreign", "lattice", "MASS", "Matrix", "mgcv", "nlme", "rpart", "survival"), lib ="/usr/lib/R/library")
.libPaths()
source("https://bioconductor.org/biocLite.R")
biocLite("GSEABase")
source("https://bioconductor.org/biocLite.R")
biocLite("GSEABase")
source("https://bioconductor.org/biocLite.R")
biocLite("GSEABase")
library("GSEABase", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
?`GSEABase-package`
?GSEABase
?GOCollection()
NullCollection()
## NullCollection when no collection type specified
collectionType(GeneSet())
collectionType(GeneSet(collectionType=GOCollection()))
## fl could be a url
fl <- system.file("extdata", "Broad.xml", package="GSEABase")
gs1 <- getBroadSets(fl)[[1]]
collectionType(gs1) # BroadCollection
## new BroadCollection, with different category
bc <- BroadCollection(category="c2")
## change collectionType of gs2
gs2 <- gs1
collectionType(gs2) <- NullCollection()
## OBOCollection
fl <- system.file("extdata", "goslim_plant.obo", package="GSEABase")
getOBOCollection(fl, evidenceCode="TAS") # returns OBOCollection
OBOCollection(c("GO:0008967", "GO:0015119", "GO:0030372", "GO:0002732",
"GO:0048090"))
biocLIte("GO.db")
biocLite("GO.db")
citation()
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("karyoploteR")
library(karyoploteR)
custom.genome <- toGRanges(data.frame(chr=c("A", "B"), start=c(1, 1), end=c(100, 200)))
kp <- plotKaryotype(genome = custom.genome)
custom.genome <- toGRanges(data.frame(chr=c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18" ), start=c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ), end=c(89643857,	69596280,	57743597, 65288255, 67248332, 61759565, 43120122, 61151155, 38581958, 53961475, 51449921, 50438331, 44396874, 45393038, 47938513, 31980953, 34923512,	27737463)))
kp <- plotKaryotype(genome = custom.genome)
setwd("gitrepos/coral_rnaseq_2017/analyses/porites/20190603_all_salmon_DEG_b_vs_nb_GO/edgeR.32435.dir/")
# A plotting R script produced by the REVIGO server at http://revigo.irb.hr/
# If you found REVIGO useful in your work, please cite the following reference:
# Supek F et al. "REVIGO summarizes and visualizes long lists of Gene Ontology
# terms" PLoS ONE 2011. doi:10.1371/journal.pone.0021800
# --------------------------------------------------------------------------
# If you don't have the ggplot2 package installed, uncomment the following line:
# install.packages( "ggplot2" );
library( ggplot2 );
# --------------------------------------------------------------------------
# If you don't have the scales package installed, uncomment the following line:
# install.packages( "scales" );
library( scales );
# --------------------------------------------------------------------------
# Here is your data from REVIGO. Scroll down for plot configuration options.
revigo.names <- c("term_ID","description","frequency_%","plot_X","plot_Y","plot_size","log10_p_value","uniqueness","dispensability");
revigo.data <- rbind(c("GO:0015701","bicarbonate transport", 0.007,-3.989,-2.813, 2.941,-2.2151,0.965,0.000),
c("GO:0032502","developmental process", 2.812, 0.167, 6.503, 5.557,-1.6696,0.983,0.000),
c("GO:0045471","response to ethanol", 0.016, 4.549, 4.872, 3.312,-3.3020,0.781,0.000),
c("GO:0050896","response to stimulus",12.210,-0.027, 3.017, 6.195,-1.8569,0.984,0.000),
c("GO:0060546","negative regulation of necroptotic process", 0.002, 2.183,-5.497, 2.362,-2.9232,0.681,0.000),
c("GO:0007306","eggshell chorion assembly", 0.004,-4.728, 4.146, 2.750,-2.9072,0.583,0.089),
c("GO:0006428","isoleucyl-tRNA aminoacylation", 0.050,-2.051,-4.514, 3.811,-2.6263,0.793,0.106),
c("GO:0017145","stem cell division", 0.013,-6.194,-0.830, 3.214,-1.5535,0.862,0.113),
c("GO:0006308","DNA catabolic process", 0.104, 0.116,-2.781, 4.126,-1.8511,0.894,0.167),
c("GO:0006957","complement activation, alternative pathway", 0.000, 5.083, 0.058, 1.771,-2.5603,0.696,0.175),
c("GO:0001539","cilium or flagellum-dependent cell motility", 0.314,-5.037,-3.371, 4.605,-1.5788,0.826,0.179),
c("GO:0009266","response to temperature stimulus", 0.213, 6.131, 2.824, 4.436,-2.3435,0.821,0.248),
c("GO:0072376","protein activation cascade", 0.018, 5.572, 1.892, 3.367,-1.5518,0.837,0.250),
c("GO:0034660","ncRNA metabolic process", 3.407,-1.850,-4.257, 5.641,-1.3075,0.890,0.281),
c("GO:0033227","dsRNA transport", 0.005,-4.370,-3.270, 2.813,-2.0440,0.913,0.293),
c("GO:0032025","response to cobalt ion", 0.001, 4.124, 5.819, 2.013,-2.2801,0.838,0.330),
c("GO:0097202","activation of cysteine-type endopeptidase activity", 0.002, 5.103,-4.028, 2.428,-2.1301,0.798,0.345),
c("GO:0045448","mitotic cell cycle, embryonic", 0.004,-4.097, 4.998, 2.674,-2.4036,0.660,0.361),
c("GO:0016246","RNA interference", 0.011, 3.833,-4.694, 3.160,-2.1313,0.721,0.384),
c("GO:0006950","response to stress", 4.575, 5.659, 3.357, 5.769,-2.1307,0.806,0.400),
c("GO:0042254","ribosome biogenesis", 1.422,-3.961, 0.709, 5.261,-1.6523,0.918,0.419),
c("GO:0030716","oocyte fate determination", 0.002,-5.056, 4.891, 2.348,-2.2119,0.669,0.422),
c("GO:0043124","negative regulation of I-kappaB kinase/NF-kappaB signaling", 0.012, 5.536, 0.553, 3.184,-1.3137,0.711,0.424),
c("GO:0009628","response to abiotic stimulus", 0.571, 5.417, 3.161, 4.865,-1.9619,0.831,0.448),
c("GO:0043038","amino acid activation", 1.124,-5.182,-2.029, 5.159,-1.3156,0.802,0.451),
c("GO:0030225","macrophage differentiation", 0.007,-3.896, 4.073, 2.947,-2.3354,0.564,0.465),
c("GO:0042744","hydrogen peroxide catabolic process", 0.093, 0.255,-1.510, 4.078,-1.3945,0.918,0.478),
c("GO:1901700","response to oxygen-containing compound", 0.503, 5.344, 4.058, 4.810,-1.9448,0.774,0.481),
c("GO:0015696","ammonium transport", 0.148,-4.690,-3.916, 4.279,-1.4646,0.961,0.483),
c("GO:0042052","rhabdomere development", 0.002,-4.811, 4.308, 2.408,-2.3207,0.630,0.492),
c("GO:0001649","osteoblast differentiation", 0.040,-5.061, 3.668, 3.710,-1.5506,0.615,0.509),
c("GO:0048646","anatomical structure formation involved in morphogenesis", 0.409,-4.348, 5.538, 4.720,-1.9258,0.662,0.529),
c("GO:0007367","segment polarity determination", 0.002,-3.693, 6.012, 2.354,-2.1684,0.695,0.544),
c("GO:0033574","response to testosterone", 0.003, 4.545, 5.377, 2.554,-2.0388,0.785,0.548),
c("GO:1904019","epithelial cell apoptotic process", 0.015, 0.220,-6.001, 3.298,-2.5111,0.741,0.551),
c("GO:0036462","TRAIL-activated apoptotic signaling pathway", 0.002, 4.407,-0.878, 2.290,-2.4299,0.662,0.552),
c("GO:0007349","cellularization", 0.006,-4.071, 5.830, 2.881,-1.8204,0.674,0.554),
c("GO:0034612","response to tumor necrosis factor", 0.032, 4.944, 4.878, 3.615,-1.3873,0.777,0.556),
c("GO:0010378","temperature compensation of the circadian clock", 0.000, 6.524, 1.365, 1.771,-2.3363,0.806,0.556),
c("GO:0097284","hepatocyte apoptotic process", 0.002, 0.722,-6.163, 2.479,-2.7346,0.762,0.564),
c("GO:0046677","response to antibiotic", 0.128, 5.437, 4.354, 4.215,-1.8113,0.792,0.565),
c("GO:0070232","regulation of T cell apoptotic process", 0.006, 1.556,-5.647, 2.903,-2.5090,0.705,0.594),
c("GO:1901216","positive regulation of neuron death", 0.009, 2.358,-5.111, 3.061,-1.4600,0.673,0.595),
c("GO:0032355","response to estradiol", 0.009, 4.771, 5.181, 3.080,-1.4498,0.773,0.615),
c("GO:0031638","zymogen activation", 0.010, 5.876,-3.742, 3.113,-1.6793,0.923,0.616),
c("GO:0048813","dendrite morphogenesis", 0.034,-4.684, 3.610, 3.645,-1.4552,0.584,0.628),
c("GO:0097194","execution phase of apoptosis", 0.017, 0.312,-6.033, 3.344,-2.0241,0.740,0.629),
c("GO:0000737","DNA catabolic process, endonucleolytic", 0.020, 0.211,-2.475, 3.402,-1.9331,0.898,0.629),
c("GO:0007279","pole cell formation", 0.001,-4.601, 5.116, 2.037,-2.2584,0.640,0.629),
c("GO:0001841","neural tube formation", 0.023,-4.122, 5.507, 3.473,-2.4316,0.619,0.629),
c("GO:0002684","positive regulation of immune system process", 0.165, 4.536,-4.041, 4.327,-1.7097,0.724,0.638),
c("GO:0097305","response to alcohol", 0.055, 5.064, 4.735, 3.850,-2.6065,0.766,0.648),
c("GO:0048738","cardiac muscle tissue development", 0.039,-3.976, 5.417, 3.697,-1.8398,0.629,0.652),
c("GO:0060285","cilium-dependent cell motility", 0.006,-5.748,-3.887, 2.912,-1.5833,0.856,0.652),
c("GO:0048134","germ-line cyst formation", 0.001,-4.844, 4.689, 2.286,-2.2357,0.645,0.659),
c("GO:1901654","response to ketone", 0.024, 4.671, 4.662, 3.480,-1.3687,0.776,0.664),
c("GO:0071260","cellular response to mechanical stimulus", 0.011, 6.079, 2.422, 3.139,-1.7065,0.824,0.672),
c("GO:0010033","response to organic substance", 0.900, 5.106, 3.990, 5.062,-1.4257,0.766,0.675),
c("GO:0042078","germ-line stem cell division", 0.003,-5.189, 3.914, 2.615,-2.1355,0.628,0.684),
c("GO:0033993","response to lipid", 0.226, 5.079, 4.436, 4.462,-1.6442,0.752,0.687));
one.data <- data.frame(revigo.data);
names(one.data) <- revigo.names;
one.data <- one.data [(one.data$plot_X != "null" & one.data$plot_Y != "null"), ];
one.data$plot_X <- as.numeric( as.character(one.data$plot_X) );
one.data$plot_Y <- as.numeric( as.character(one.data$plot_Y) );
one.data$plot_size <- as.numeric( as.character(one.data$plot_size) );
one.data$log10_p_value <- as.numeric( as.character(one.data$log10_p_value) );
one.data$frequency <- as.numeric( as.character(one.data$frequency) );
one.data$uniqueness <- as.numeric( as.character(one.data$uniqueness) );
one.data$dispensability <- as.numeric( as.character(one.data$dispensability) );
#head(one.data);
# --------------------------------------------------------------------------
# Names of the axes, sizes of the numbers and letters, names of the columns,
# etc. can be changed below
p1 <- ggplot( data = one.data );
p1 <- p1 + geom_point( aes( plot_X, plot_Y, colour = log10_p_value, size = plot_size), alpha = I(0.6) ) + scale_size_area();
p1 <- p1 + scale_colour_gradientn( colours = c("blue", "green", "yellow", "red"), limits = c( min(one.data$log10_p_value), 0) );
p1 <- p1 + geom_point( aes(plot_X, plot_Y, size = plot_size), shape = 21, fill = "transparent", colour = I (alpha ("black", 0.6) )) + scale_size_area();
p1 <- p1 + scale_size( range=c(5, 30)) + theme_bw(); # + scale_fill_gradientn(colours = heat_hcl(7), limits = c(-300, 0) );
ex <- one.data [ one.data$dispensability < 0.15, ];
p1 <- p1 + geom_text( data = ex, aes(plot_X, plot_Y, label = description), colour = I(alpha("black", 0.85)), size = 3 );
p1 <- p1 + labs (y = "semantic space x", x = "semantic space y");
p1 <- p1 + theme(legend.key = element_blank()) ;
one.x_range = max(one.data$plot_X) - min(one.data$plot_X);
one.y_range = max(one.data$plot_Y) - min(one.data$plot_Y);
p1 <- p1 + xlim(min(one.data$plot_X)-one.x_range/10,max(one.data$plot_X)+one.x_range/10);
p1 <- p1 + ylim(min(one.data$plot_Y)-one.y_range/10,max(one.data$plot_Y)+one.y_range/10);
# --------------------------------------------------------------------------
# Output the plot to screen
p1;
# Uncomment the line below to also save the plot to a file.
# The file type depends on the extension (default=pdf).
# ggsave("C:/Users/path_to_your_file/revigo-plot.pdf");
